#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(lines) out;
layout(max_vertices=32, max_primitives=16) out;

layout (binding = 0) uniform MatrixBuffer {
    mat4 model;
    mat4 view;
    mat4 proj;
} mat_buffer;

struct s_meshlet {
    uint vertex_offset;
    uint triangle_offset;
    uint vertex_count;
    uint triangle_count;
};

struct s_vertex {
    vec3 position;
    vec3 normal;
    vec3 tangent;
    vec3 bitagent;
    vec2 texCoords;
};

struct s_meshlet_bounds {
	vec3 normal;
	float cone_angle;
	vec3 sphere_pos;
	float sphere_radius;
	vec3 normal_pos;
};

layout (std430, set = 1, binding = 0) buffer VertexBuffer {
	s_vertex vertices[];
} vertex_buffer;

layout (std430, set = 1, binding = 1) buffer MeshletBuffer {
     s_meshlet meshlets[];
} meshlet_buffer;

layout (std430, set = 1, binding = 2) buffer MeshletVertices {
      uint vertices[];
} meshlet_vertices;

layout (std430, set = 1, binding = 3) buffer MeshletTriangles {
     uint triangles[];
} meshlet_triangles;

layout (std430, set = 1, binding = 4) buffer MeshletBounds {
     s_meshlet_bounds bounds[];
} meshlet_bounds;


layout (push_constant, std430) uniform MeshPushConstant {
    mat4 rotation_mat;
    mat4 scale_mat;
	uint meshlet_count;
};


layout (location = 0) out vec4 o_color[]; 

void main() {

	// const uint offset = gl_WorkGroupID.x * gl_WorkGroupSize.x;
	// const uint max_offset = min(meshlet_count, offset + gl_WorkGroupSize.x);

	// const uint i = offset + gl_LocalInvocationIndex;

	// if (i >= (max_offset)) {
	// 	SetMeshOutputsEXT(0, 0);
	// 	return;
	// }

	// const uint range = max_offset - offset;

	// SetMeshOutputsEXT(range * 2, range);

	// const s_meshlet_bounds bound = meshlet_bounds.bounds[i];

	// const mat4 model_mat = mat_buffer.proj * mat_buffer.view * rotation_mat * scale_mat;

	// const vec3 position = bound.normal_pos;
	// const vec3 tip = bound.normal_pos + bound.normal;

	// const uint v_i = i * 2;

	// const vec4 t_position = model_mat * vec4(position, 1.0f);
	// const vec4 t_tip = model_mat * vec4(tip, 1.0f);

	// gl_MeshVerticesEXT[v_i].gl_Position = t_position; 
	// gl_MeshVerticesEXT[v_i + 1].gl_Position = t_tip; 

	// o_color[v_i] = vec4(1.f, 0.f, 0.f, 1.f);
	// o_color[v_i + 1] = vec4(1.f, 1.f, 0.f, 1.f);

	// gl_PrimitiveLineIndicesEXT[i] = uvec2(v_i, v_i + 1);

}
