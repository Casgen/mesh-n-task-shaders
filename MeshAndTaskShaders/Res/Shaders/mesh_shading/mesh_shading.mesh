#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout(triangles) out;
layout(max_vertices=64, max_primitives=126) out;

layout (binding = 0) uniform MatrixBuffer {
    mat4 model;
    mat4 view;
    mat4 proj;
} mat_buffer;

struct s_vertex {
    vec3 position;
    vec3 normal;
    vec3 tangent;
    vec3 bitagent;
    vec2 texCoords;
};

layout (std430, set = 1, binding = 0) buffer VertexBuffer {
    s_vertex vertices[];
} vertex_buffer;


struct s_meshlet {
    uint vertex_offset;
    uint triangle_offset;
    uint vertex_count;
    uint triangle_count;
};

struct s_meshlet_bound {
	vec3 normal;
	float coneAngle;
	vec3 spherePos;
	float sphereRadius;
};

layout (std430, set = 1, binding = 1) buffer MeshletBuffer {
     s_meshlet meshlets[];
} meshlet_buffer;

layout (std430, set = 1, binding = 2) buffer MeshletVertices {
      uint vertices[];
} meshlet_vertices;

layout (std430, set = 1, binding = 3) buffer MeshletTriangles {
     uint triangles[];
} meshlet_triangles;

layout (std430, set = 1, binding = 4) buffer MeshletBounds {
     s_meshlet_bound bounds[];
} meshlet_bounds;

layout (push_constant, std430) uniform MeshPushConstant {
	// The offset is here due to the offset due to the preceding push constant used
	// in the fragment shader.
    layout(offset = 96) mat4 rotation_mat; 
    mat4 scale_mat;
	uint meshlet_count;
};

layout (location = 0) out vec4 o_color[]; 
layout (location = 1) out vec3 o_normal[]; 
layout (location = 2) out vec3 o_position[]; 

#define MAX_COLORS 10
vec3 meshlet_colors[MAX_COLORS] = {
  vec3(1,0,0), 
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  vec3(1,1,1)
};

void main()
{
	s_meshlet meshlet = meshlet_buffer.meshlets[gl_WorkGroupID.x];

    SetMeshOutputsEXT(meshlet.vertex_count, meshlet.triangle_count);

	for (uint i = gl_LocalInvocationIndex; i < meshlet.vertex_count; i += 64) {
		mat4 model_mat = rotation_mat * scale_mat;

        uint vertex = meshlet_vertices.vertices[meshlet.vertex_offset + i];
        
        vec4 pos = mat_buffer.proj * mat_buffer.view * model_mat * vec4(vertex_buffer.vertices[vertex].position, 1.0f); 

        gl_MeshVerticesEXT[i].gl_Position = pos;

        o_color[i] = vec4(meshlet_colors[gl_WorkGroupID.x % MAX_COLORS],1.0f);
        o_normal[i] = mat3(transpose(inverse(model_mat))) * vertex_buffer.vertices[vertex].normal;
        o_position[i] = pos.xyz;
	}

	const mat4 t_rotation_mat = transpose(rotation_mat);
	// debugPrintfEXT("MeshRotMat: {\n\t%1.3v4f,\n\t%1.3v4f,\n\t%1.3v4f,\n\t%1.3v4f\n}\n", t_rotation_mat[0], t_rotation_mat[1], t_rotation_mat[2], t_rotation_mat[3]);

	for (uint i = gl_LocalInvocationIndex; i < meshlet.triangle_count; i += 64)
	{
		uint triangle = meshlet_triangles.triangles[meshlet.triangle_offset + i];

		uint firstIndex = triangle & 255;
		uint secondIndex = (triangle >> 8)  & 255;
		uint thirdIndex = (triangle >> 16)  & 255;

		gl_PrimitiveTriangleIndicesEXT[i] = uvec3(firstIndex, secondIndex, thirdIndex); 
	}

}
