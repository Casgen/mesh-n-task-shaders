#version 450

#extension GL_NV_mesh_shader : require

layout(local_size_x = 3) in;
layout(triangles, max_vertices = 3, max_primitives = 2) out;

layout (binding = 0) uniform MatrixBuffer {
    mat4 model;
    mat4 view;
    mat4 proj;
} matBuffer;

struct s_vertex {
    vec3 position;
};

layout (binding = 1) buffer VertexBuffer {
    s_vertex vertices[];
} vertexBuffer;


struct s_meshlet {
    uint vertices[4];
    uint indices[6];
    uint vertexCount;
    uint indexCount;
};

layout (std430, binding = 2) buffer MeshletBuffer {
     s_meshlet meshlets[];
} meshletBuffer;

layout (location = 0) out PerVertexData
{
  vec4 color;
} v_out[];


float scale = 0.95;
const vec3 vertices[3] = {vec3(-0.5,-0.5,0), vec3(0,0.5,0), vec3(0.5,-0.5,0)};
const vec3 colors[3] = {vec3(1.0,0.0,0.0), vec3(0.0,1.0,0.0), vec3(0.0,0.0,1.0)};


void main()
{
    uint thread_id = gl_LocalInvocationID.x;

    vec4 pos = vec4(vertices[thread_id] * scale, 1.0);
    // pos.y = -pos.y; pos.z = (pos.z + pos.w) / 2.0;

    pos = matBuffer.proj * matBuffer.view * pos;

    gl_MeshVerticesNV[thread_id].gl_Position = pos;
    gl_PrimitiveIndicesNV[thread_id] = thread_id;
    v_out[thread_id].color = vec4(colors[thread_id], 1.0);
    gl_PrimitiveCountNV = 1;
}
