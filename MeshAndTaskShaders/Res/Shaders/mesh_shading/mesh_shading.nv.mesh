#version 460

#extension GL_NV_mesh_shader : require
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles) out;
layout(max_vertices=64, max_primitives=42) out;

layout (binding = 0) uniform MatrixBuffer {
    mat4 model;
    mat4 view;
    mat4 proj;
} matBuffer;

struct s_vertex {
    vec3 position;
    vec3 normal;
    vec3 tangent;
    vec3 bitagent;
    vec2 texCoords;
};

layout (std430, set = 1, binding = 0) buffer VertexBuffer {
    s_vertex vertices[];
} vertex_buffer;


struct s_meshlet {
    uint indices[126];
    uint vertices[64];
    uint vertex_count;
    uint index_count;
};

layout (std430, set = 1, binding = 1) buffer MeshletBuffer {
     s_meshlet meshlets[];
} meshlet_buffer;

layout (push_constant, std430) uniform MeshPushConstant {
    layout(offset = 96) mat4 rotation_mat;
    mat4 scale_mat;
};

layout (location = 0) out vec4 o_color[]; 
layout (location = 1) out vec3 o_normal[]; 
layout (location = 2) out vec3 o_position[]; 

#define MAX_COLORS 10
vec3 meshlet_colors[MAX_COLORS] = {
  vec3(1,0,0), 
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  vec3(1,1,1)
};

void main()
{
    uint workgroup_id = gl_WorkGroupID.x;
    uint vertex_count = meshlet_buffer.meshlets[workgroup_id].vertex_count;

    mat4 model_mat = rotation_mat * scale_mat;

    for (uint i = 0; i < vertex_count; i++) {
        uint vert = meshlet_buffer.meshlets[workgroup_id].vertices[i];
        
        vec4 pos = matBuffer.proj * matBuffer.view * model_mat * vec4(vertex_buffer.vertices[vert].position, 1.0f); 

        gl_MeshVerticesNV[i].gl_Position = pos;

        o_color[i] = vec4(meshlet_colors[workgroup_id % MAX_COLORS],1.0f);
        o_normal[i] = mat3(transpose(inverse(model_mat))) * vertex_buffer.vertices[vert].normal;
        o_position[i] = pos.xyz;
    }

    uint index_count = meshlet_buffer.meshlets[workgroup_id].index_count;
    uint primitive_count = uint(index_count) / 3;

    gl_PrimitiveCountNV = primitive_count;

    for (uint i = 0; i < index_count; i += 3)
    {
        gl_PrimitiveIndicesNV[i] = meshlet_buffer.meshlets[workgroup_id].indices[i];
        gl_PrimitiveIndicesNV[i + 1] = meshlet_buffer.meshlets[workgroup_id].indices[i + 1];
        gl_PrimitiveIndicesNV[i + 2] = meshlet_buffer.meshlets[workgroup_id].indices[i + 2];
    }

}
