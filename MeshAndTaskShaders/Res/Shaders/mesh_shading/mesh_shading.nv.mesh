#version 460

#extension GL_NV_mesh_shader : require
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles) out;
layout(max_vertices=4, max_primitives=2) out;

layout (binding = 0) uniform MatrixBuffer {
    mat4 model;
    mat4 view;
    mat4 proj;
} matBuffer;

struct s_vertex {
    vec4 position;
    vec4 color;
};

layout (std430, set = 1, binding = 0) buffer VertexBuffer {
    s_vertex vertices[];
} vertexBuffer;


struct s_meshlet {
    uint indices[6];
    uint vertices[4];
    uint vertexCount;
    uint indexCount;
};

layout (std430, set = 1, binding = 1) buffer MeshletBuffer {
     s_meshlet meshlets[];
} meshletBuffer;

layout (location = 0) out vec4 v_Color[]; 

#define MAX_COLORS 10
vec3 meshletcolors[MAX_COLORS] = {
  vec3(1,0,0), 
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  vec3(1,1,1)
};

void main()
{
    uint workGroupId = gl_WorkGroupID.x;
    uint vertexCount = meshletBuffer.meshlets[workGroupId].vertexCount;

    // debugPrintfEXT("\n");

    vec4 pos;

    for (uint i = 0; i < vertexCount; i++) {
        uint vert = meshletBuffer.meshlets[workGroupId].vertices[i];
        // debugPrintfEXT("Vertex %d Untransformed: %1.2v4f\n", vert, vertexBuffer.vertices[vert].position);
        
        pos = matBuffer.proj * matBuffer.view * vertexBuffer.vertices[vert].position; 
        // debugPrintfEXT("Vertex %d Transformed: %1.2v4f\n", vert, pos);

        gl_MeshVerticesNV[i].gl_Position = pos;

        v_Color[i] = vertexBuffer.vertices[vert].color;
    }

    uint indexCount = meshletBuffer.meshlets[workGroupId].indexCount;
    gl_PrimitiveCountNV = 2;

    for (uint i = 0; i < indexCount; i++)
    {
        gl_PrimitiveIndicesNV[i] = meshletBuffer.meshlets[workGroupId].indices[i];
        debugPrintfEXT("workGroupId: %d, gl_PrimitiveIndicesNV[%d]: %d\n", workGroupId, i, gl_PrimitiveIndicesNV[i]);
    }

    debugPrintfEXT("\n");
}
