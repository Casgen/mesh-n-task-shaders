#version 460

#extension GL_EXT_debug_printf : enable

layout (local_size_x = 8,local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, r32f) uniform image2D heightImage;
layout (set = 0, binding = 1, rgba32f) uniform image2D normalImage;

layout (push_constant, std430) uniform NoisePC {
	float u_time;
	float u_speed;
	float u_height;
	int u_octaves;
};


// See reference https://lygia.xyz/generative/pnoise

vec2 quintic(const in vec2 v)  { return v*v*v*(v*(v*6.0-15.0)+10.0); }
vec3 quintic(const in vec3 v)  { return v*v*v*(v*(v*6.0-15.0)+10.0); }
vec4 quintic(const in vec4 v)  { return v*v*v*(v*(v*6.0-15.0)+10.0); }

float mod289(const in float x) { return x - floor(x * (1. / 289.)) * 289.; }
vec2 mod289(const in vec2 x) { return x - floor(x * (1. / 289.)) * 289.; }
vec3 mod289(const in vec3 x) { return x - floor(x * (1. / 289.)) * 289.; }
vec4 mod289(const in vec4 x) { return x - floor(x * (1. / 289.)) * 289.; }

vec2 permute(const in vec2 v) { return mod289(((v * 34.0) + 1.0) * v); }
vec3 permute(const in vec3 v) { return mod289(((v * 34.0) + 1.0) * v); }
vec4 permute(const in vec4 v) { return mod289(((v * 34.0) + 1.0) * v); }

vec2 taylorInvSqrt(in vec2 r) { return 1.79284291400159 - 0.85373472095314 * r; }
vec3 taylorInvSqrt(in vec3 r) { return 1.79284291400159 - 0.85373472095314 * r; }
vec4 taylorInvSqrt(in vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

float pnoise(in vec3 P, in vec3 rep) {
    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
    Pi0 = mod289(Pi0);
    Pi1 = mod289(Pi1);
    vec3 Pf0 = fract(P); // Fractional part for interpolation
    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    vec4 iy = vec4(Pi0.yy, Pi1.yy);
    vec4 iz0 = Pi0.zzzz;
    vec4 iz1 = Pi1.zzzz;

    vec4 ixy = permute(permute(ix) + iy);
    vec4 ixy0 = permute(ixy + iz0);
    vec4 ixy1 = permute(ixy + iz1);

    vec4 gx0 = ixy0 * (1.0 / 7.0);
    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
    gx0 = fract(gx0);
    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
    vec4 sz0 = step(gz0, vec4(0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);

    vec4 gx1 = ixy1 * (1.0 / 7.0);
    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
    gx1 = fract(gx1);
    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
    vec4 sz1 = step(gz1, vec4(0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);

    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x;
    g010 *= norm0.y;
    g100 *= norm0.z;
    g110 *= norm0.w;
    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x;
    g011 *= norm1.y;
    g101 *= norm1.z;
    g111 *= norm1.w;

    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);

    vec3 fade_xyz = quintic(Pf0);
    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
    return 2.2 * n_xyz;
}

float fbmPerlinNoise(vec2 uv) {

	float accNoise = 0.0;
	float amplitude = u_height;

	for (uint i = 0; i < u_octaves; i++) {
		accNoise += pnoise(vec3(uv, u_time * u_speed), vec3(3.4f, 2.4f, 1.4f) * u_octaves) * amplitude;
		amplitude *= 0.5;

		uv *= 2.0;
	}
	
	return accNoise;
}

void main() {

	vec4 color = vec4(1.f);

	ivec2 resolution = imageSize(heightImage);
	ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);

	vec2 st = vec2(gl_GlobalInvocationID.xy) / vec2(resolution);

	float noise = fbmPerlinNoise(st * 5.f);

	imageStore(heightImage, texel_coord, vec4(noise * u_height, 0.f, 0.f, 1.f));

	memoryBarrier();

	vec2 diff = vec2(1.f) / resolution.xy;

	float p1 = fbmPerlinNoise((st * 5.f + vec2(diff.x, 0.f)));
	float p2 = fbmPerlinNoise((st * 5.f - vec2(diff.x, 0.f)));
	float p3 = fbmPerlinNoise((st * 5.f + vec2(0.f, diff.y)));
	float p4 = fbmPerlinNoise((st * 5.f - vec2(0.f, diff.y)));

	// float p1 = pnoise(vec3((st + vec2(diff.x, 0.f)) * 5.f, u_time * u_speed), vec3(3.4f, 2.4f, 1.4f)) * u_height;
	// float p2 = pnoise(vec3((st - vec2(diff.x, 0.f)) * 5.f, u_time * u_speed), vec3(3.4f, 2.4f, 1.4f)) * u_height;
	// float p3 = pnoise(vec3((st + vec2(0.f, diff.y)) * 5.f, u_time * u_speed), vec3(3.4f, 2.4f, 1.4f)) * u_height;
	// float p4 = pnoise(vec3((st - vec2(0.f, diff.y)) * 5.f, u_time * u_speed), vec3(3.4f, 2.4f, 1.4f)) * u_height;

	vec3 normal = normalize(vec3(p1 - p2, p3 - p4, 0.001f * u_height));

	imageStore(normalImage, texel_coord, vec4(normal, 1.f));
}
