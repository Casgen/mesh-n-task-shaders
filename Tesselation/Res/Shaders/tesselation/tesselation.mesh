#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles) out;
layout(max_vertices=64, max_primitives=126) out;

#define MAX_VERTICES 64
#define MAX_TRIANGLES 98

struct SharedData
{
	vec2 vert_coords[MAX_VERTICES];
	vec2 vert_uvs[MAX_VERTICES];
	uint triangles[98];
};

struct Frustum {
	vec3 left;
	vec3 right;
	vec3 top;
	vec3 bottom;
	vec3 front;
	vec3 back;
	vec3 point_sides;
	vec3 point_front;
	vec3 point_back;
	vec3 side_vec;
	float azimuth;
	float zenith;
};

layout (binding = 0) uniform MatrixBuffer {
    mat4 model;
    mat4 view;
    mat4 proj;
	Frustum frustum;
} mat_buffer;

layout (set = 1, binding = 0) uniform sampler2D heightMapSampler;
layout (set = 1, binding = 1) uniform sampler2D normalMapSampler;

taskPayloadSharedEXT SharedData payload;

layout (location = 0) out vec4 o_color[]; 
layout (location = 1) out vec3 o_position[]; 
layout (location = 2) out vec2 o_texCoords[]; 

#define MAX_COLORS 10
vec3 meshlet_colors[MAX_COLORS] = {
  vec3(1,0,0), 
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  vec3(1,1,1)
};


uvec3 unpackTriangle(const uint triangle) {
	return uvec3(triangle & 0xFF, (triangle >> 8) & 0xFF, (triangle >> 16) & 0xFF);
}

void main()
{

	uint thread_id = gl_LocalInvocationIndex;

	SetMeshOutputsEXT(MAX_VERTICES, MAX_TRIANGLES);

	for (uint i = thread_id; i < MAX_VERTICES; i += 32)
	{
		vec4 vertex = vec4(payload.vert_coords[i].x,texture(heightMapSampler, payload.vert_uvs[i]).r , payload.vert_coords[i].y, 1.f);
		// vec4 vertex = vec4(payload.vert_coords[i].x,0.f, payload.vert_coords[i].y, 1.f);
		
		vec4 pos = mat_buffer.proj * mat_buffer.view * vertex; 

		gl_MeshVerticesEXT[i].gl_Position = pos;

		o_color[i] = vec4(meshlet_colors[gl_WorkGroupID.x % MAX_COLORS],1.0f);
		o_position[i] = pos.xyz;
		o_texCoords[i] = payload.vert_uvs[i];
	}

	for (uint i = gl_LocalInvocationIndex; i < MAX_TRIANGLES; i += 32)
	{
		gl_PrimitiveTriangleIndicesEXT[i] = unpackTriangle(payload.triangles[i]); 
	}


}
